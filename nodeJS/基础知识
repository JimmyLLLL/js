全局对象：所有模块都可以调用的
global：表示Node所在的全局环境，类似于浏览器的window对象。
process：该对象表示Node所处的当前进程，允许开发者与该进程互动。
console：指向Node内置的console模块，提供命令行环境中的标准输入、标准输出功能。

全局函数
定时器函数：共有4个，分别是setTimeout(), clearTimeout(), setInterval(), clearInterval()；
require：用于加载模块；
Buffer()：用于操作二进制数据。

 全局变量
__filename：指向当前运行的脚本文件名。
__dirname：指向当前运行的脚本所在的目录。

Node的三大特点
2.1 单线程
Node.js不为每个客户连接创建一个新的线程，而仅仅使用一个线程。当有用户连接了，就触发一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js程序宏观上也是并行的。
Copy
2.2 非阻塞I/O
由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。

当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。

阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。所以，这是一种特别有哲理的解决方案：与其人多，但是好多人闲着；还不如一个人玩命，往死里干活儿。

2.3 事件驱动event-driven
在Node中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。

Node.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建。