模块定义

上下文提供exports对象用于导出当前模块的方法和变量，并且他是唯一的导出出口

exports实际上是module.exports，而module.exports就是以一个暴露给外部的对象。

exports.some就是给这个对象上添加属性
直接使用 module.exports = {...} 则可以让外部直接获取到这个对象，相当与为exports换了一个引用，如果在这之前使用exports.some会把之前的覆盖
1.3 CommonJS 用法
// a.js
module.exports = {
    a: 3
}
exports.a = 1

// b.js
var module = require('./a.js')
module.a // -> log 1

在Node中引入模块，需要经历3个步骤

路径分析
文件定位
编译执行
在node中，模块分为两类：一类是node提供的模块称为核心模块，一类是用户编写的成为文件模块。

核心模块在编译中编译成了二进制文件。在Node进程启动时，部分核心模块就被直接加载入内存。所以这部分核心模块引入时就省了文件定位和编译执行这两个步骤，并且在路径分析中优先判断，它的加载速度是最快的。

文件模块是运行时动态加载。需要完整的路径分析、文件定位、编译执行

优先从缓存加载
Node对引入的模块都回进行缓存，而且缓存的是编译执行后的对象。

不管是核心模块还是文件模块，require()都一律采用缓存优先的方式。


1.核心模块
2.路径形式的文件模块
3.自定义模块
    node_modules下查找最费时

件定位
文件拓展名分析
    如果省略拓展名，回按 .js .node .json的次序依次尝试
    如果.node .json的话，加上拓展名会加快一点速度
    同步配合缓存，可大幅缓解单线程中阻塞式调用的缺陷
目录分析和包
    如果没有文件名，会将Index当作默认文件名


 模块编译
.js文件
通过fs同步读取后编译执行
.node
这是用C/C++编写的拓展文件，通过dlopen()方法加载最后编译生成的文件
.json
用JSON.parse()解析返回结果
其余拓展名
当作.js文件处理

每一个编译成功的模块都会将其文件路径索引缓存在Module._cache对象上，以提高二次引入性能

在编译的过程中，Node对获取的JS文件进行了头尾包装。这也是每个模块都能访问到 require、exports、module、filename、dirname的原因

(funciton(exports, require, module, __filename, __dirname) {

  /* 自己写的代码  */

});

node的模块引入几乎都是同步的，但前端模块若是也采用同步方式来引入必会在用户体验上造成很大的问题，即UI初始化实际过长