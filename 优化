prefetch
<link rel="prefetch" ></link>
这段代码告诉浏览器，这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低。也就是说prefetch通常用于加速下一次导航，而不是本次的。
被标记为prefetch的资源，将会被浏览器在空闲时间加载。（笼统，还是要实际观察）

preload
<link rel="preload" ></link>
preload通常用于本页面要用到的关键资源，包括关键js、字体、css文件。preload将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度。

工程优化方向还包括：
图片懒加载
雪碧图
合理设置缓存策略
使用 prefetch / preload 预加载等新特性
以 tree shaking 手段为主的代码瘦身

具体实现上有：
动画性能方向
操作 DOM 方向
浏览器加载、渲染性能方向
性能测量、监控方向

动画性能方向与浏览器渲染性能息息相关

动画
一般 CSS3 动画会比基于 JavaScript 实现的动画效率要高，因此优先使用 CSS3 实现效果（这一点并不绝对）
在使用 CSS3 实现动画时，考虑开启 GPU 加速（这一点也并不总是正向效果）
优先使用消耗最低的 transform 和 opacity 两个属性
使用 will-change 属性
独立合成层，减少绘制区域
对于只能使用 JavaScript 实现动画效果的情况，考虑 requestAnimationFrame、requestIdleCallback API
批量进行样式变换，减少布局抖动

如何减少回流与重绘
减少回流、重绘其实就是需要减少对render tree的操作（合并多次多DOM和样式的修改），并减少对一些style信息的请求（每次读取一次都相当于回流），尽量利用好浏览器的优化策略。

1.对Render Tree的计算通常只需要遍历一次就可以完成，但table及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，避免使用table布局。
2.尽可能在DOM树的最末端改变class。避免设置多层内联样式。
3.将动画效果应用到position属性为absolute或fixed的元素上。避免使用CSS表达式（例如：calc()）。
4.避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。
5.避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。也可以先为元素设置display: none，操作结束后再把
它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。避免频繁读取会引发回流/重绘的属性，
如果确实需要多次使用，就用一个变量缓存起来。对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。

transform 和 opacity 效果，不会触发 layout 和 paint
