HTTP始于1989
HTTP2.0于2015年发布

但是考虑到落地，HTTP1.1作为现状分析
HTTP现状与痛点
HTTP1.1相对以前的优点
长连接：默认开启了Connection：keep－alive，这样在一个TCP连接上可以传送多个HTTP请求和响应
减少了建立和关闭连接的消耗与延迟，业界的成熟方案，如Google的protobuf
管线化：长连接的基础上，管线化使得多个请求使用同一个TCP连接并按照并行方式
成为可能；多个请求同时发起，无需等待上一个请求的回包。
注意：管线化只是让请求并行，没有从根本上解决队头阻塞问题，因为响应仍然
要遵循先进先出的原则。大部分浏览器很难实现这个功能，甚至删除它

HTTP1.1其它改进

1.缓存处理
2.带宽优化及网络连接的使用，比如range头，支持断点续传功能
3.错误通知的增强，响应码的增强
4.Host头处理，请求信息中如果没有Host头域会报告一个错误

基于HTTP1.1的变革，一些成熟的方案
1. http long-polling
2. http streaming
3. websocket

缺点：
1.队头阻塞问题没有真正解决
2.明文传输，安全性有隐患
3.header携带的内容过多，增加传输成本
4.默认开启keep-alive给服务器造成更大的性能压力，比如对于加载CDN的图片，在
文件被请求后还保持了不必要的连接很长时间

HTTP2.0
帧：HTTP2.0中，客户端与服务器通过交换帧来通信，帧是基于这个新协议通信的最小单位
消息：是指逻辑上的HTTP消息，比如请求、响应等，由一或多帧组成
流：连接中的一个虚拟通道，可以承载双向消息。每个流都有唯一一标识符

HTTP2.0主要特征如下

二进制分帧
HTTP2.0协议解析决定采用二进制格式，而非HTTP1.x的文本格式，二进制文件解析起来更高效（性能增强的焦点）。
二进制协议将通信分解为帧的方式，这些帧交织在客户端和服务器之间的双向逻辑流中
这样就使得所有的通信都在单个TCP连接上进行，而且该连接在整个对话期间一直处于打开状态

请求／响应复用
所有的相同域名请求道都通过同一个TCP连接完成，同一个TCP中可以发送多个请求
对端通过帧中的标识知道属于哪个请求。通过这个技术，避免队头阻塞

头部压缩和二进制格式

流先优化
消息帧通过流进行发送。我们提到每个流都分配了一个 id，同时也可以分配优先级。这样一来，服务端可以根据优先级确定它的处理顺序

服务器推送

流控制
流控制允许接收者主动示意停止或减少发送的数据量。比如一个视频应用，在观看一个视频流时，服务器会同时向客户端发送数据。如果视频暂停，客户端会通知服务器停止发送视频数据，以避免耗尽它的缓存